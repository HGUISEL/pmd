/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTAssignmentOperator.java */

package net.sourceforge.pmd.lang.java.ast;

/**
 * Represents an assignment expression.
 *
 * <pre>
 *
 * Expression ::= {@linkplain ASTPrimaryExpression ConditionalExpression} ( AssignmentOperator AssignmentExpression )?
 *
 * AssignmentOperator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
 *
 * </pre>
 */
public final class ASTAssignmentExpression extends AbstractJavaTypeNode implements ASTExpression {

    private AssignmentOperator operator;


    ASTAssignmentExpression(int id) {
        super(id);
    }


    ASTAssignmentExpression(JavaParser p, int id) {
        super(p, id);
    }


    void setOp(AssignmentOperator op) {
        this.operator = op;
    }


    public ASTPrimaryExpression getLeftHandSide() {
        return (ASTPrimaryExpression) jjtGetChild(0);
    }


    public ASTExpression getRightHandSide() {
        return (ASTExpression) jjtGetChild(1);
    }


    /**
     * Returns whether this is a compound assignment (any operator except "=").
     */
    public boolean isCompound() {
        return operator.isCompound();
    }


    /**
     * Returns the assignment operator.
     */
    public AssignmentOperator getOperator() {
        return operator;
    }


    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }


    @Override
    public <T> void jjtAccept(SideEffectingVisitor<T> visitor, T data) {
        visitor.visit(this, data);
    }
}
