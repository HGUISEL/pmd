/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTPrimitiveType.java */

package net.sourceforge.pmd.lang.java.ast;

import java.util.Arrays;
import java.util.Optional;


/**
 * Represents a primitive type.
 *
 * <pre>
 *
 * PrimitiveType ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double"
 *
 * </pre>
 */
public class ASTPrimitiveType extends AbstractJavaTypeNode implements ASTType {

    public ASTPrimitiveType(PrimitiveType type) {
        super(JavaParserTreeConstants.JJTPRIMITIVETYPE);
        setImage(type.getToken());
    }


    ASTPrimitiveType(int id) {
        super(id);
    }


    ASTPrimitiveType(JavaParser p, int id) {
        super(p, id);
    }


    public boolean isBoolean() {
        return "boolean".equals(getImage());
    }


    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }


    @Override
    public <T> void jjtAccept(SideEffectingVisitor<T> visitor, T data) {
        visitor.visit(this, data);
    }



    public enum PrimitiveType {
        BOOLEAN,
        CHAR,
        INT,
        BYTE,
        SHORT,
        LONG,
        DOUBLE,
        FLOAT;


        /**
         * Returns the token used to represent the type in source,
         * e.g. "int" or "double".
         */
        public String getToken() {
            return name().toLowerCase();
        }


        /**
         * Gets an enum constant from the token used to represent it in source,
         * e.g. "int" or "double".
         *
         * @param token String token
         *
         * @return A constant, or the empty optional if the token doesn't correspond to a constant
         */
        public static Optional<PrimitiveType> fromToken(String token) {
            return Arrays.stream(values()).filter(v -> v.getToken().equals(token)).findFirst();
        }

    }

}
