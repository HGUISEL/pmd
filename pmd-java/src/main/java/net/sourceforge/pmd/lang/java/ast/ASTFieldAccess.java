/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTNullLiteral.java */

package net.sourceforge.pmd.lang.java.ast;

import java.util.Optional;


/**
 * A field access expression.
 *
 * <pre>
 *
 * FieldAccess ::=  {@link ASTPrimaryExpression PrimaryExpression} "." &lt;IDENTIFIER&gt;
 *
 * </pre>
 */
public final class ASTFieldAccess extends AbstractJavaTypeNode implements ASTPrimaryExpression {
    ASTFieldAccess(int id) {
        super(id);
    }


    ASTFieldAccess(JavaParser p, int id) {
        super(p, id);
    }


    /**
     * TODO this is for now always non-empty, since field accesses without qualifier
     *   are classified as {@link ASTAmbiguousNameExpr}. But the symbol table could
     *   easily provide a way to reclassify those as field accesses too.
     */
    public Optional<ASTPrimaryExpression> getLeftHandSide() {
        return Optional.ofNullable(getFirstChildOfType(ASTPrimaryExpression.class));
    }


    /**
     * Returns the name of the field.
     */
    public String getFieldName() {
        return getImage();
    }


    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }


    @Override
    public <T> void jjtAccept(SideEffectingVisitor<T> visitor, T data) {
        visitor.visit(this, data);
    }
}
