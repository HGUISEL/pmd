/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTShiftExpression.java */

package net.sourceforge.pmd.lang.java.ast;

/**
 * Represents a shift expression on a numeric value. This has a precedence greater than {@link ASTRelationalExpression},
 * and lower than {@link ASTAdditiveExpression}.
 *
 * <p>Note that the children of this node are not necessarily {@link ASTAdditiveExpression},
 * rather, they are expressions with an operator precedence greater or equal to AdditiveExpression.
 *
 *
 * <pre class="grammar">
 *
 * ShiftExpression ::=  {@linkplain ASTAdditiveExpression AdditiveExpression} ( ( "&lt;&lt;"  | "&gt;&gt;" | "&gt;&gt;&gt;" ) {@linkplain ASTAdditiveExpression AdditiveExpression} )+
 *
 * </pre>
 */
public class ASTShiftExpression extends AbstractJavaTypeNode implements ASTExpression {
    public ASTShiftExpression(int id) {
        super(id);
    }

    public ASTShiftExpression(JavaParser p, int id) {
        super(p, id);
    }

    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }


    @Override
    public <T> void jjtAccept(SideEffectingVisitor<T> visitor, T data) {
        visitor.visit(this, data);
    }


    /**
     * Returns the image of the operator, i.e. "<<", ">>", or ">>>".
     */
    public String getOperator() {
        return getImage();
    }

    public BinaryOp getOp() {
        return BinaryOp.fromImage(getImage());
    }
}
