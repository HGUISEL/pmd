/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTAdditiveExpression.java */

package net.sourceforge.pmd.lang.java.ast;

/**
 * Represents an addition operation on two or more values, or string concatenation.
 * This has a precedence greater than {@link ASTShiftExpression}, and lower
 * than {@link ASTMultiplicativeExpression}.
 *
 * <p>Note that the children of this node are not necessarily {@link ASTMultiplicativeExpression},
 * rather, they are expressions with an operator precedence greater or equal to MultiplicativeExpression.
 *
 * <pre class="grammar">
 *
 * AdditiveExpression ::= {@linkplain ASTMultiplicativeExpression MultiplicativeExpression} ( ( "+" | "-" ) {@linkplain ASTMultiplicativeExpression MultiplicativeExpression} )+
 *
 * </pre>
 */
public class ASTAdditiveExpression extends AbstractJavaTypeNode implements ASTExpression, LeftRecursiveNode {

    private BinaryOp operator;

    ASTAdditiveExpression(int id) {
        super(id);
    }

    ASTAdditiveExpression(JavaParser p, int id) {
        super(p, id);
    }

    @Override
    public void jjtClose() {
        super.jjtClose();

        // At this point the expression is fully left-recursive
        // If any of its left children are also AdditiveExpressions with the same operator,
        // we adopt their children to flatten the node

        AbstractJavaNode first = (AbstractJavaNode) jjtGetChild(0);
        if (first instanceof ASTAdditiveExpression && ((ASTAdditiveExpression) first).getOp() == getOp()) {
            flatten(0);
        }
    }


    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }


    @Override
    public <T> void jjtAccept(SideEffectingVisitor<T> visitor, T data) {
        visitor.visit(this, data);
    }

    @Override
    public void setImage(String image) {
        super.setImage(image);
        this.operator = BinaryOp.fromImage(image);
    }

    /**
     * Returns the image of the operator, i.e. "+" or "-".
     */
    public String getOperator() {
        return getImage();
    }

    public BinaryOp getOp() {
        return operator;
    }
}
