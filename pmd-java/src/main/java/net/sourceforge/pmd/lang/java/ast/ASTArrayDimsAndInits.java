/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTArrayDimsAndInits.java */

package net.sourceforge.pmd.lang.java.ast;

/**
 * TODO get rid of Dimensionable here. Ideally reuse {@link ASTArrayTypeDim},
 *     or use a special node for array creation, bc {@link ASTAllocationExpression}
 *     is too broad.
 *
 * Current grammar:
 * <pre class="grammar">
 *
 * ArrayDimsAndInit ::= TypeAnnotation* "[" Expression "]" ( "[" "]" )*
 *                    | ( "[" "]" )+ ArrayInitializer()
 *
 * </pre>
 *
 * Actual JLS (https://docs.oracle.com/javase/specs/jls/se9/html/jls-15.html#jls-DimExprs):
 * <pre class="grammar">
 *
 * (: This production doesn't exist in the JLS, they have a special production for Array creation expressions :)
 * (: Ideally we'd do the same. :)
 *
 * ArrayDimsAndInit ::= TypeAnnotation* DimExpr* Dim*
 *                    | Dim* {@link ASTArrayInitializer ArrayInitializer}
 *
 * (: Notice that annotations are allowed before any Dim or DimExpr :)
 *
 * DimExpr          ::= TypeAnnotation* [ Expression ]
 * Dim              ::= {@link ASTArrayTypeDim ArrayTypeDim}
 *
 * </pre>
 *
 */
@Deprecated
public class ASTArrayDimsAndInits extends AbstractJavaNode implements Dimensionable {
    private int arrayDepth;

    public ASTArrayDimsAndInits(int id) {
        super(id);
    }

    public ASTArrayDimsAndInits(JavaParser p, int id) {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }


    @Override
    public <T> void jjtAccept(SideEffectingVisitor<T> visitor, T data) {
        visitor.visit(this, data);
    }


    @Deprecated
    public void bumpArrayDepth() {
        arrayDepth++;
    }

    @Override
    @Deprecated
    public int getArrayDepth() {
        return arrayDepth;
    }

    @Override
    @Deprecated
    public boolean isArray() {
        return arrayDepth > 0; // should always be true...
    }
}
