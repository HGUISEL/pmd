/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTNullLiteral.java */

package net.sourceforge.pmd.lang.java.ast;

/**
 * A field access expression.
 *
 * <pre>
 *
 * TODO there's ambiguity
 *
 * MethodCall ::=  {@link ASTName MethodName} {@link ASTArgumentList ArgumentList}
 *                 {@link ASTPrimaryExpression PrimaryExpression} "." {@link ASTTypeArguments TypeArguments}? &lt;IDENTIFIER&gt; {@link ASTArgumentList ArgumentList}
 *              |  {@link ASTClassOrInterfaceType ClassName} "." {@link ASTTypeArguments TypeArguments}? &lt;IDENTIFIER&gt; {@link ASTArgumentList ArgumentList}
 * </pre>
 */
public final class ASTMethodCall extends AbstractJavaTypeNode implements ASTPrimaryExpression {
    ASTMethodCall(int id) {
        super(id);
    }


    ASTMethodCall(JavaParser p, int id) {
        super(p, id);
    }


    public String getMethodName() {
        return getImage();
    }


    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }


    @Override
    public <T> void jjtAccept(SideEffectingVisitor<T> visitor, T data) {
        visitor.visit(this, data);
    }
}
