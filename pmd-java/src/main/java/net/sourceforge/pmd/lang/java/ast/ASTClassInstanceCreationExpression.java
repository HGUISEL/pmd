/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
/* Generated By:JJTree: Do not edit this line. ASTAllocationExpression.java */

package net.sourceforge.pmd.lang.java.ast;

import java.util.Optional;


/**
 * A class instance creation expression. Represents both {@linkplain #isQualifiedInstanceCreation() qualified}
 * and unqualified instance creation. May declare an anonymous class body. TODO API
 *
 *
 * <pre>
 *
 * ClassInstanceCreationExpression ::= UnqualifiedAlloc
 *                                   | {@link ASTPrimaryExpression PrimaryExpression} "." UnqualifiedAlloc
 *
 * UnqualifiedAlloc ::= "new" {@link ASTTypeArguments TypeArguments}? ClassOrInterfaceTypeToInstantiate {@link ASTArgumentList ArgumentList} {@link ASTAnonymousClassDeclaration AnonymousClassDeclaration}?
 *
 * ClassOrInterfaceTypeToInstantiate ::=
 *                          {@link ASTAnnotation TypeAnnotation}* {@link ASTClassOrInterfaceType ClassOrInterfaceType}
 *
 * </pre>
 */
public final class ASTClassInstanceCreationExpression extends AbstractJavaTypeNode implements ASTPrimaryExpression {

    ASTClassInstanceCreationExpression(int id) {
        super(id);
    }


    ASTClassInstanceCreationExpression(JavaParser p, int id) {
        super(p, id);
    }


    @Override
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }


    @Override
    public <T> void jjtAccept(SideEffectingVisitor<T> visitor, T data) {
        visitor.visit(this, data);
    }


    /**
     * Returns true if this expression begins with a primary expression.
     * Such an expression creates an instance of inner member classes and
     * their anonymous subclasses. For example, {@code new Outer().new Inner()}
     * evaluates to an instance of the Inner class, which is nested inside
     * the new instance of Outer.
     */
    public boolean isQualifiedInstanceCreation() {
        return jjtGetChild(0) instanceof ASTPrimaryExpression;
    }


    /**
     * Returns the left-hand-side of this expression, if this is a
     * {@linkplain #isQualifiedInstanceCreation() qualified allocation expression}.
     */
    public Optional<ASTPrimaryExpression> getLhsExpression() {
        return isQualifiedInstanceCreation()
               ? Optional.of((ASTPrimaryExpression) jjtGetChild(0))
               : Optional.empty();
    }


    public Optional<ASTTypeArguments> getExplicitTypeArguments() {
        return Optional.ofNullable(getFirstChildOfType(ASTTypeArguments.class));
    }


    public ASTArgumentList getArguments() {
        int idx = jjtGetNumChildren() - (isAnonymousClass() ? 2 : 1);
        return (ASTArgumentList) jjtGetChild(idx);
    }


    /**
     * Returns the type node.
     */
    public ASTClassOrInterfaceType getTypeNode() {
        return getFirstChildOfType(ASTClassOrInterfaceType.class);
    }


    /**
     * Returns true if this expression defines a body,
     * which is compiled to an anonymous class. If this
     * method returns false.
     */
    public boolean isAnonymousClass() {
        return jjtGetChild(jjtGetNumChildren() - 1) instanceof ASTAnonymousClassDeclaration;
    }


    public Optional<ASTAnonymousClassDeclaration> getAnonymousClassDeclaration() {
        return isAnonymousClass()
               ? Optional.of((ASTAnonymousClassDeclaration) jjtGetChild(jjtGetNumChildren() - 1))
               : Optional.empty();
    }


}
